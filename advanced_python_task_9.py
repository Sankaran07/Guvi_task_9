# 1 What is the expected output of the following
# Python code given below :-
# data = [10, 501,22, 37, 100,999, 87, 351]
# result = filter (lambda ×: x> 4, data)
# print (list (result)).

# It looks like there's a small syntax error in your code. 
# The lambda function uses the symbol ×, which is not a valid variable name in Python.
# It seems like you intended to use x instead.
# Here's an example:

data = [10, 501, 22, 37, 100, 999, 87, 351]
result = filter(lambda x: x > 4, data)
print(list(result))

# With this correction, the code filters out elements in the data list that are greater than 4. The expected output would be:

# output.

# [10, 501, 22, 37, 100, 999, 87, 351]
# All elements in the data list are greater than 4, so the entire list is returned.


# 2,  Write a Python code using Lambda function to check every element of a List is an Integer or String ?

# Certainly! You can use the map function along with a lambda function to check if each element in a list is an integer or a string. 
# Here's an example:


my_list = [1, 'hello', 3.14, 'world', 42]

# Check if each element is an integer or a string
result = map(lambda x: isinstance(x, (int, str)), my_list)

# Print the result as a list
print(list(result))
# In this code, the isinstance function is used within the lambda function to check 
# if each element x in the my_list is either an integer or a string. The result is a list of boolean values indicating whether each element is an integer or a string. The output for the provided my_list would be:

# output

# [True, True, False, True, True]

# This indicates that the first, second, fourth, and fifth elements are either integers or strings,
# while the third element (3.14) is neither.


# 3, Using the Python Lambda function create a Fibonacci series from 1 to 50 elements?


# Creating a Fibonacci series using a lambda function may not be the most straightforward approach, but it's possible.
#  The reduce function from the functools module is commonly used for such purposes.
#  Here's an example:


from functools import reduce

# Define the number of elements in the Fibonacci series
n = 50

# Use lambda function with reduce to generate Fibonacci series
fibonacci_series = reduce(lambda x, _: x + [x[-2] + x[-1]], range(n - 1), [0, 1])

# Print the generated Fibonacci series
print(fibonacci_series)
# In this example:

# reduce is used to repeatedly apply the lambda function to the sequence of values generated by range(n - 1). The lambda function adds the sum of the last two elements of the list to the list.
# The initial value for the list is set to [0, 1] to start the Fibonacci series.
# This code will print the first 50 elements of the Fibonacci series. If you want a different number of elements, you can change the value of n.


# 4, Write a Python function to validate the Regular Expression for the following :-
# a.) Email Address
# b.) Mobile numbers of Bangladesh
# c.) Telephone numbers of USA
# d.) 16 character Alpha-Numeric password composed of alphabets of Upper Case, Lower Case, Special Characters, Numbers.

# To validate the given regular expressions for the specified patterns 
# (Email Address, Mobile numbers of Bangladesh, Telephone numbers of the USA, 
# and 16-character Alpha-Numeric password), you can use the re module in Python.
#  Here's a function

import re

def validate_regex(pattern, value):
    """
    Validate a value against a regular expression pattern.

    Args:
        pattern (str): Regular expression pattern.
        value (str): Value to be validated.

    Returns:
        bool: True if the value matches the pattern, False otherwise.
    """
    return bool(re.fullmatch(pattern, value))

# Example usage:

# a.) Email Address
email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
email_address = 'test@example.com'
print(f"Is '{email_address}' a valid email address? {validate_regex(email_pattern, email_address)}")

# b.) Mobile numbers of Bangladesh
bangladesh_mobile_pattern = r'^\+8801[3-9]\d{8}$'
bangladesh_mobile_number = '+8801712345678'
print(f"Is '{bangladesh_mobile_number}' a valid Bangladesh mobile number? {validate_regex(bangladesh_mobile_pattern, bangladesh_mobile_number)}")

# c.) Telephone numbers of USA
usa_telephone_pattern = r'^\+1-\d{3}-\d{3}-\d{4}$'
usa_telephone_number = '+1-555-123-4567'
print(f"Is '{usa_telephone_number}' a valid USA telephone number? {validate_regex(usa_telephone_pattern, usa_telephone_number)}")

# d.) 16 character Alpha-Numeric password
password_pattern = r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{16}$'
alpha_numeric_password = 'Abcd1234@$!xyzXYZ'
print(f"Is '{alpha_numeric_password}' a valid 16-character Alpha-Numeric password? {validate_regex(password_pattern, alpha_numeric_password)}")


# This example demonstrates how to use the validate_regex function with different patterns. 
#  You can modify the patterns according to your specific requirements.

